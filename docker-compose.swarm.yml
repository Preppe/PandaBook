version: '3.8'

services:
  frontend:
    image: ghcr.io/preppe/audiobook/frontend:latest
    ports:
      - "80:80" # Map host port 80 to container port 80
    networks:
      - app-network
      - proxy
    deploy:
      replicas: 1 # Number of replicas for the frontend service
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        - traefik.http.routers.audiobook-frontend.rule=Host(`audiobook.fumarola.dev`)
        - traefik.http.routers.audiobook-frontend.entrypoints=websecure
        - traefik.http.routers.audiobook-frontend.tls.certresolver=lets-encrypt
        - traefik.http.services.audiobook-frontend.loadbalancer.server.port=80

  dashboard:
    image: ghcr.io/preppe/audiobook/dashboard:latest
    networks:
      - app-network
      - proxy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        - traefik.http.routers.audiobook-dashboard.rule=Host(`audiobook.fumarola.dev`) && PathPrefix(`/dashboard`)
        - traefik.http.routers.audiobook-dashboard.middlewares=strip-dashboard-prefix
        - traefik.http.middlewares.strip-dashboard-prefix.stripprefix.prefixes=/dashboard
        - traefik.http.routers.audiobook-dashboard.entrypoints=websecure
        - traefik.http.routers.audiobook-dashboard.tls.certresolver=lets-encrypt
        - traefik.http.services.audiobook-dashboard.loadbalancer.server.port=3000 # Next.js default port

  api:
    image: ghcr.io/preppe/audiobook/api:latest
    networks:
      - app-network
      - proxy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        - traefik.http.routers.audiobook-api.rule=Host(`audiobook.fumarola.dev`) && PathPrefix(`/api`)
        - traefik.http.routers.audiobook-api.middlewares=strip-api-prefix
        - traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api
        - traefik.http.routers.audiobook-api.entrypoints=websecure
        - traefik.http.routers.audiobook-api.tls.certresolver=lets-encrypt
        - traefik.http.services.audiobook-api.loadbalancer.server.port=3000

  postgres:
    image: postgres:17.0-alpine
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-network
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME} 
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  maildev:
    # build: # Build context needs to be handled differently in Swarm, assuming pre-built image
    #   context: ./backend # Adjusted context path relative to root
    #   dockerfile: maildev.Dockerfile
    image: maildev/maildev # Using standard maildev image, adjust if custom image exists
    networks:
      - app-network
      # Exposing maildev UI via Traefik (optional)
      - proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        - traefik.http.routers.audiobook-maildev.rule=Host(`maildev.audiobook.fumarola.dev`)
        - traefik.http.routers.audiobook-maildev.entrypoints=websecure
        - traefik.http.routers.audiobook-maildev.tls.certresolver=lets-encrypt
        - traefik.http.services.audiobook-maildev.loadbalancer.server.port=1080 # Maildev web UI port

  minio:
    image: minio/minio
    networks:
      - app-network
      # Exposing minio UI via Traefik (optional)
      - proxy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-ROOTNAME} # Use env var or default
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-CHANGEME123} # Use env var or default
    volumes:
      - minio:/data
    command: server /data --console-address ":9001"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=proxy
        # API Port
        - traefik.http.routers.audiobook-minio-api.rule=Host(`minio-api.audiobook.fumarola.dev`)
        - traefik.http.routers.audiobook-minio-api.entrypoints=websecure
        - traefik.http.routers.audiobook-minio-api.tls.certresolver=lets-encrypt
        - traefik.http.services.audiobook-minio-api.loadbalancer.server.port=9000
        # Console Port
        - traefik.http.routers.audiobook-minio-console.rule=Host(`minio.audiobook.fumarola.dev`)
        - traefik.http.routers.audiobook-minio-console.entrypoints=websecure
        - traefik.http.routers.audiobook-minio-console.tls.certresolver=lets-encrypt
        - traefik.http.services.audiobook-minio-console.loadbalancer.server.port=9001

  redis:
    image: redis:7-alpine
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  proxy:
    external: true
  app-network:
    driver: overlay
    attachable: true

volumes:
  db:
    driver: local # Or specify a Swarm-compatible volume driver if needed
  minio:
    driver: local # Or specify a Swarm-compatible volume driver if needed
